import streamlit as st
import pandas as pd
import io
from PIL import Image
from Inicio import gerenciar_estoque_completo # Certifique-se que o arquivo Inicio.py está na mesma pasta

# Inicialização das chaves de session_state
# É CRUCIAL que todas as chaves que você usa em qualquer parte do app sejam inicializadas aqui.
# Isso evita erros de "KeyError" quando o app recarrega.
if "estoque" not in st.session_state:
    st.session_state["estoque"] = pd.DataFrame(columns=["Nome do Produto", "Quantidade", "Preço de Compra (R$)"])
if "produto_selecionado_id" not in st.session_state:
    st.session_state["produto_selecionado_id"] = None
if "carrinho" not in st.session_state: # Adicionado para garantir que o carrinho existe desde o início
    st.session_state["carrinho"] = {}
if "mostrar_todos_produtos" not in st.session_state: # Adicionado para a nova funcionalidade de visualização
    st.session_state["mostrar_todos_produtos"] = False


if "usuarios_cadastrados" not in st.session_state:
    # Exemplo: cadastre um admin e um usuário comum para testes
    st.session_state["usuarios_cadastrados"] = [
        {"usuario": "admin", "email": "admin@example.com", "senha": "admin", "admin": True},
        {"usuario": "user", "email": "user@example.com", "senha": "user", "admin": False}
    ]

if "logado" not in st.session_state:
    st.session_state["logado"] = False
if "acesso_privilegiado" not in st.session_state:
    st.session_state["acesso_privilegiado"] = False
if "last_logged_in_user" not in st.session_state: # Armazena o nome do último usuário logado
    st.session_state["last_logged_in_user"] = ""


st.set_page_config(
    page_title="Estoque Maker",
    layout="centered",
)

# Estilos CSS
IMAGEM_URL = 'wall.png'
st.markdown(
    """
    <style>
    .st-emotion-cache-1xgtwnd { /* Ajuste esta classe se o Streamlit mudar */
        background-color: black; 
        color: white;
    }

    .st-emotion-cache-tj3uvl { /* Ajuste esta classe se o Streamlit mudar */
        background-color: black; 
        color: white;
    }
    
    .stApp {{
        background-image: url("file://{IMAGEM_URL}");
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-position: center;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

# Carregar logo e título
# st.image ("D:\Lucas\Estoque\iamg.png",use_container_width= True) # Removido para evitar erro de caminho em sistemas diferentes
# Use um caminho relativo ou peça ao usuário para subir a imagem
st.image("D:\Lucas\Estoque\iamg.png", use_container_width=True) # Exemplo de placeholder

logo_path = "logo.jpg" # Certifique-se que 'logo.jpg' está na mesma pasta do app.py

logo_imagem = None
try:
    logo_imagem = Image.open(logo_path)
    st.logo(logo_imagem, size="large", link="http://localhost:8501")
    st.title("Meu App de Estoque") # Título ajustado para ser mais descritivo
except FileNotFoundError:
    st.error(f"Arquivo de logo não encontrado em '{logo_path}'. Verifique o caminho.")
    st.title("Meu App de Estoque")
except Exception as e:
    st.error(f"Ocorreu um erro ao carregar o logo: {e}")
    st.title("Meu App de Estoque")

st.write('---')

def pagina_cadastro_login():
    st.header("Bem-vindo(a)! Faça Login ou Cadastre-se")
    st.write("---")

    st.subheader("Fazer Login")
    login_usuario = st.text_input("Usuário (Login)", key="login_user_input")
    login_senha = st.text_input("Senha (Login)", type="password", key="login_pass_input")
    # A checkbox de admin no login não é necessária para a lógica, pois a permissão é do cadastro
    # login_admin_checkbox = st.checkbox("Sou administrador (Login)", key="login_admin_check")

    if st.button("Entrar", key="login_button"):
        usuario_encontrado = None
        for user_data in st.session_state["usuarios_cadastrados"]:
            if user_data["usuario"] == login_usuario and user_data["senha"] == login_senha:
                usuario_encontrado = user_data
                break

        if usuario_encontrado:
            st.success(f"Login realizado com sucesso! Bem-vindo(a), {login_usuario}!")
            st.session_state["logado"] = True
            st.session_state["acesso_privilegiado"] = usuario_encontrado.get("admin", False)
            st.session_state["last_logged_in_user"] = login_usuario
            st.rerun()
        else:
            st.error("Usuário ou senha inválidos.")
            st.session_state["logado"] = False
            st.session_state["acesso_privilegiado"] = False

    st.write("---")

    st.subheader("Novo Cadastro")
    cadastro_usuario = st.text_input("Nome de Usuário (Cadastro)", key="cadastro_user_input")
    cadastro_email = st.text_input("E-mail (Cadastro)", key="cadastro_email_input")
    cadastro_senha = st.text_input("Senha (Cadastro)", type="password", key="cadastro_senha_input")
    cadastro_confirma_senha = st.text_input("Confirmar Senha (Cadastro)", type="password", key="cadastro_confirma_senha_input")
    cadastro_admin_checkbox = st.checkbox("Quero me cadastrar como administrador", key="cadastro_admin_check")

    if st.button("Cadastrar", key="cadastro_button"):
        if cadastro_senha != cadastro_confirma_senha:
            st.error("As senhas não coincidem.")
        elif not cadastro_usuario or not cadastro_senha:
            st.error("Nome de usuário e senha são obrigatórios.")
        elif any(user["usuario"] == cadastro_usuario for user in st.session_state["usuarios_cadastrados"]):
            st.error("Nome de usuário já existe. Por favor, escolha outro.")
        else:
            novo_usuario = {
                "usuario": cadastro_usuario,
                "email": cadastro_email,
                "senha": cadastro_senha,
                "admin": cadastro_admin_checkbox
            }
            st.session_state["usuarios_cadastrados"].append(novo_usuario)
            st.success(f"Usuário '{cadastro_usuario}' cadastrado com sucesso!")
            if cadastro_admin_checkbox:
                st.info("Você se cadastrou como administrador!")
            else:
                st.info("Você se cadastrou como usuário comum.")

def pagina_area_privilegiada():
    if "logado" in st.session_state and st.session_state["logado"] and \
        "acesso_privilegiado" in st.session_state and st.session_state["acesso_privilegiado"]:

        st.header("Conteúdo da Área Privilegiada (Admin)")
        st.success("Bem-vindo(a) à área restrita, Administrador!")
        st.button("Realizar Ação de Admin") # Este botão é apenas um placeholder

        st.write("---")

        st.subheader("Download de Dados de Usuários")
        st.write("Clique no botão abaixo para baixar todos os usuários cadastrados.")

        df_usuarios = pd.DataFrame(st.session_state["usuarios_cadastrados"])

        csv_buffer = io.StringIO()
        df_usuarios.to_csv(csv_buffer, index=False)
        csv_bytes = csv_buffer.getvalue().encode('utf-8')

        st.download_button(
            label="Baixar Cadastros (CSV)",
            data=csv_bytes,
            file_name="usuarios_cadastrados.csv",
            mime="text/csv",
            help="Baixa uma lista de todos os usuários cadastrados em formato CSV."
        )

        st.write("---")
        st.subheader("Visualizar Usuários Cadastrados")
        if not df_usuarios.empty:
            df_display = df_usuarios.drop(columns=["senha"], errors='ignore')
            st.dataframe(df_display)
        else:
            st.info("Nenhum usuário cadastrado ainda.")
    else:
        st.error("Acesso negado. Você não tem permissão para visualizar esta página.")
        st.info("Por favor, faça login como administrador para acessar esta área.")

st.sidebar.title("Navegação Principal")

# Oculta a "Área Privilegiada" do menu lateral se o usuário não for admin e estiver logado
if st.session_state["logado"] and not st.session_state["acesso_privilegiado"]:
    pagina_selecionada = st.sidebar.radio(
        "Escolha uma opção:",
        ("Cadastro / Login", "Início"), # Remove "Área Privilegiada"
        index=0 if st.session_state["logado"] == False else 1 # Ajusta o índice inicial se já logado
    )
elif st.session_state["logado"] and st.session_state["acesso_privilegiado"]: # Se admin
    pagina_selecionada = st.sidebar.radio(
        "Escolha uma opção:",
        ("Cadastro / Login", "Início", "Área Privilegiada"),
        index=0 if st.session_state["logado"] == False else 1 # Ajusta o índice inicial se já logado
    )
else: # Se não logado
    pagina_selecionada = st.sidebar.radio(
        "Escolha uma opção:",
        ("Cadastro / Login",), # Apenas "Cadastro / Login" visível
        index=0
    )


if pagina_selecionada == "Cadastro / Login":
    pagina_cadastro_login()
elif pagina_selecionada == "Início":
    gerenciar_estoque_completo()
elif pagina_selecionada == "Área Privilegiada":
    pagina_area_privilegiada()

st.sidebar.write("---")
if st.session_state["logado"]:
    status_login = "Logado como: Usuário Comum"
    username = st.session_state.get("last_logged_in_user", "")

    if st.session_state["acesso_privilegiado"]:
        status_login = "Logado como: **Administrador**"
        if username:
            status_login += f" ({username})"
    elif username:
        status_login += f" ({username})"

    st.sidebar.success(status_login)

    if st.sidebar.button("Sair"):
        # Mantenha apenas as chaves de login/permissão para limpar no logout
        keys_to_delete = ["logado", "acesso_privilegiado", "last_logged_in_user"]
        for key in keys_to_delete:
            if key in st.session_state:
                del st.session_state[key]
        # Opcional: Se você quiser limpar o estoque e o carrinho ao deslogar
        # if "estoque" in st.session_state:
        #     del st.session_state["estoque"]
        # if "carrinho" in st.session_state:
        #     del st.session_state["carrinho"]
        st.rerun()

else:
    st.sidebar.info("Não logado.")

st.sidebar.write("---")
st.sidebar.info("Desenvolvido com Streamlit")
import streamlit as st
import pandas as pd
import io
from PIL import Image
import base64

# --- Inicializa√ß√£o do Session State (CRUCIAL para evitar loops e manter o estado) ---
# √â importante que essas inicializa√ß√µes estejam fora de qualquer fun√ß√£o
# para garantir que sejam executadas apenas uma vez por sess√£o.
if "logado" not in st.session_state:
    st.session_state["logado"] = False
if "estoque" not in st.session_state:
    st.session_state["estoque"] = pd.DataFrame(columns=[
        "Nome do Produto", 
        "Quantidade", 
        "Pre√ßo de Compra (R$)", 
        "Imagem", 
        "Cor da Tag", 
        "Estoque M√≠nimo"
    ])
if "produto_selecionado_id" not in st.session_state:
    st.session_state["produto_selecionado_id"] = None


# Fun√ß√£o para exibir o alerta de estoque baixo
def mostar_o_alerta_de_Estoque_baixo(product_name, current_stock, min_stock):
    st.warning(f"‚ö†Ô∏è **Alerta de Estoque Baixo:** O produto '{product_name}' est√° com {current_stock} unidades em estoque. O m√≠nimo recomendado √© {min_stock}!", icon="üö®")

def pagina_inicio():
    st.header("üì¶ Gerenciador de Estoque")
    st.write("---")

    if not st.session_state["logado"]:
        st.info("Por favor, fa√ßa login para acessar o gerenciador de estoque.")
        return

    # Garante que as colunas de imagem e cor existam no DataFrame
    # Isso √© importante para DataFrames carregados de CSV, etc.
    if "Imagem" not in st.session_state["estoque"].columns:
        st.session_state["estoque"]["Imagem"] = None
    if "Cor da Tag" not in st.session_state["estoque"].columns:
        st.session_state["estoque"]["Cor da Tag"] = "Nenhuma"
    if "Estoque M√≠nimo" not in st.session_state["estoque"].columns: # Nova coluna
        st.session_state["estoque"]["Estoque M√≠nimo"] = 100 # Valor padr√£o de estoque m√≠nimo

    # --- Se√ß√£o Adicionar/Editar Produto ---
    st.subheader("Adicionar/Editar Produto")

    with st.form("form_produto"):
        if st.session_state["produto_selecionado_id"] is not None:
            produto_para_editar = st.session_state["estoque"].iloc[st.session_state["produto_selecionado_id"]]
            nome_padr√£o = produto_para_editar["Nome do Produto"]
            quantidade_padrao = produto_para_editar["Quantidade"]
            padrao_preco_compra = produto_para_editar["Pre√ßo de Compra (R$)"]
            padrao_cor_tag = produto_para_editar.get("Cor da Tag", "Nenhuma")
            padrao_estoque_minimo = produto_para_editar.get("Estoque M√≠nimo", 100) # Pega o m√≠nimo existente ou padr√£o
            st.info(f"Editando produto: **{nome_padr√£o}**")
        else:
            nome_padr√£o = ""
            quantidade_padrao = 0
            padrao_preco_compra = 0.0
            padrao_cor_tag = "Nenhuma"
            padrao_estoque_minimo = 100

        nome = st.text_input("Nome do Produto", value=nome_padr√£o, key="input_nome")
        quantidade = st.number_input("Quantidade", min_value=0, value=quantidade_padrao, step=1, key="input_quantidade")
        preco_compra = st.number_input("Pre√ßo de Compra (R$)", min_value=0.0, value=padrao_preco_compra, step=0.01, format="%.2f", key="input_compra")
        
        # Novo campo para Estoque M√≠nimo
        estoque_minimo = st.number_input("Estoque M√≠nimo para Alerta", min_value=0, value=padrao_estoque_minimo, step=1, key="input_min_stock")

        uploaded_image = st.file_uploader("Upload de Imagem do Produto (opcional)", type=["png", "jpg", "jpeg"], key="input_image")
        
        cores_disponiveis = ["Nenhuma", "Vermelho", "Azul", "Verde", "Amarelo", "Laranja", "Roxo", "Preto", "Branco"]
        cor_selecionada = st.selectbox("Escolha uma cor para a tag", options=cores_disponiveis, index=cores_disponiveis.index(padrao_cor_tag), key="input_color")

        col1, col2 = st.columns(2)
        with col1:
            if st.session_state["produto_selecionado_id"] is None:
                adicionar_button = st.form_submit_button("Adicionar Produto")
            else:
                adicionar_button = st.form_submit_button("Salvar Altera√ß√µes")
        with col2:
            if st.session_state["produto_selecionado_id"] is not None:
                cancelar_edicao_button = st.form_submit_button("Cancelar Edi√ß√£o")
                if cancelar_edicao_button:
                    st.session_state["produto_selecionado_id"] = None
                    st.experimental_rerun() # Necess√°rio para resetar o formul√°rio

        if adicionar_button:
            if not nome:
                st.error("O nome do produto n√£o pode ser vazio.")
            elif quantidade < 0:
                st.error("A quantidade n√£o pode ser negativa.")
            else:
                imagem_base64 = None
                if uploaded_image:
                    try:
                        imagem_bytes = uploaded_image.getvalue()
                        imagem_base64 = base64.b64encode(imagem_bytes).decode('utf-8')
                    except Exception as e:
                        st.warning(f"N√£o foi poss√≠vel processar a imagem. Erro: {e}")
                        imagem_base64 = None
                elif st.session_state["produto_selecionado_id"] is not None:
                    imagem_base64 = produto_para_editar.get("Imagem")

                novo_produto_data = {
                    "Nome do Produto": nome,
                    "Quantidade": quantidade,
                    "Pre√ßo de Compra (R$)": preco_compra,
                    "Imagem": imagem_base64,
                    "Cor da Tag": cor_selecionada,
                    "Estoque M√≠nimo": estoque_minimo
                }
                novo_produto = pd.DataFrame([novo_produto_data])

                if st.session_state["produto_selecionado_id"] is None:
                    st.session_state["estoque"] = pd.concat([st.session_state["estoque"], novo_produto], ignore_index=True)
                    st.success(f"Produto '{nome}' adicionado ao estoque!")
                else:
                    st.session_state["estoque"].iloc[st.session_state["produto_selecionado_id"]] = novo_produto.iloc[0]
                    st.success(f"Produto '{nome}' atualizado no estoque!")
                    st.session_state["produto_selecionado_id"] = None

                st.rerun() # Necess√°rio para limpar o formul√°rio e atualizar a tabela

    st.write("---")

    # --- Se√ß√£o Retirar Produto do Estoque ---
    st.subheader("Retirar Produtos do Estoque")
    if st.session_state["estoque"].empty:
        st.info("Nenhum produto no estoque para retirar.")
    else:
        # Permite selecionar o produto a ser retirado
        nomes_produtos = st.session_state["estoque"]["Nome do Produto"].tolist()
        produto_a_retirar_nome = st.selectbox("Selecione o produto para retirar:", options=nomes_produtos, key="select_retirar_produto")
        
        # Encontra o √≠ndice do produto selecionado
        idx_produto_retirar = st.session_state["estoque"].index[st.session_state["estoque"]["Nome do Produto"] == produto_a_retirar_nome].tolist()
        
        if idx_produto_retirar:
            idx_produto_retirar = idx_produto_retirar[0] # Pega o primeiro (e √∫nico) √≠ndice
            produto_atual = st.session_state["estoque"].iloc[idx_produto_retirar]
            
            st.info(f"Estoque atual de '{produto_atual['Nome do Produto']}': **{int(produto_atual['Quantidade'])}** unidades.")
            
            quantidade_retirar = st.number_input("Quantidade a retirar:", min_value=1, max_value=int(produto_atual['Quantidade']), value=1, step=1, key="input_quantidade_retirar")
            
            if st.button("Retirar do Estoque", key="button_retirar"):
                if quantidade_retirar <= produto_atual['Quantidade']:
                    st.session_state["estoque"].loc[idx_produto_retirar, "Quantidade"] -= quantidade_retirar
                    st.success(f"{quantidade_retirar} unidades de '{produto_atual['Nome do Produto']}' retiradas com sucesso!")
                    st.rerun() # Necess√°rio para atualizar a tabela e o contador
                else:
                    st.error(f"N√£o √© poss√≠vel retirar {quantidade_retirar} unidades. H√° apenas {int(produto_atual['Quantidade'])} em estoque.")
        else:
            st.warning("Produto selecionado n√£o encontrado. Por favor, recarregue a p√°gina.")


    st.write("---")

    # --- Se√ß√£o Estoque Atual e Alertas ---
    st.subheader("Estoque Atual")

    if st.session_state["estoque"].empty:
        st.info("Seu estoque est√° vazio. Adicione alguns produtos!")
    else:
        # Filtro de busca
        termo_busca = st.text_input("Buscar produto:", help="Digite o nome do produto para filtrar.", key="search_product")
        df_exibir = st.session_state["estoque"].copy() # Faz uma c√≥pia para n√£o modificar o DataFrame original durante a filtragem

        if termo_busca:
            df_exibir = df_exibir[df_exibir["Nome do Produto"].str.contains(termo_busca, case=False, na=False)]
            if df_exibir.empty:
                st.warning("Nenhum produto encontrado com o termo de busca.")

        # C√°lculos de valor
        valor_total_compra = (df_exibir["Quantidade"] * df_exibir["Pre√ßo de Compra (R$)"]).sum()

        col_metrics1, col_metrics2 = st.columns(2)
        with col_metrics1:
            st.metric("Valor Total de Compra", f"R$ {valor_total_compra:,.2f}")
        with col_metrics2:
            st.metric("Total de Produtos (unidades)", df_exibir["Quantidade"].sum())

        st.write("---")

        # Exibir alertas de estoque baixo no topo da se√ß√£o de estoque
        baixo_estoque_produtos = df_exibir[df_exibir["Quantidade"] < df_exibir["Estoque M√≠nimo"]]
        if not baixo_estoque_produtos.empty:
            st.markdown("### Alertas de Estoque Baixo:")
            for idx, row in baixo_estoque_produtos.iterrows():
                mostar_o_alerta_de_Estoque_baixo(row["Nome do Produto"], int(row["Quantidade"]), int(row["Estoque M√≠nimo"]))
            st.write("---")

        # Exibir tabela interativa com imagem e tag de cor
        cores_css = {
            "Nenhuma": "transparent",
            "Vermelho": "#FF0000", "Azul": "#0000FF", "Verde": "#008000",
            "Amarelo": "#FFFF00", "Laranja": "#FFA500", "Roxo": "#800080",
            "Preto": "#000000", "Branco": "#FFFFFF"
        }

        # Cria a coluna de visualiza√ß√£o para imagem e tag
        df_display = df_exibir.reset_index().rename(columns={'index': 'ID'}) # Garante que o ID corresponde ao √≠ndice real do DataFrame

        df_display["Visualizar"] = df_display.apply(lambda row: f"""
            <div style="display: flex; align-items: center; gap: 10px;">
                <div style="
                    width: 50px; 
                    height: 50px; 
                    border-radius: 5px;
                    overflow: hidden;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    border: 1px solid #ddd;
                ">
                    {f'<img src="data:image/jpeg;base64,{row["Imagem"]}" style="width: 100%; height: 100%; object-fit: cover;">' if row["Imagem"] else '<span style="font-size: 20px;">üñºÔ∏è</span>'}
                </div>
                <div style="
                    width: 20px; 
                    height: 20px; 
                    border-radius: 50%; 
                    background-color: {cores_css.get(row['Cor da Tag'], 'transparent')}; 
                    border: 1px solid #ccc;
                "></div>
            </div>
        """, axis=1)

        # Usando st.data_editor para edi√ß√£o interativa (Streamlit >= 1.23.0)
        # Permite edi√ß√£o direta da quantidade e do estoque m√≠nimo
        edited_df = st.data_editor(
            df_display[["ID", "Visualizar", "Nome do Produto", "Quantidade", "Pre√ßo de Compra (R$)", "Estoque M√≠nimo", "Cor da Tag"]],
            column_config={
                "ID": st.column_config.Column(width="small", disabled=True),
                "Visualizar": st.column_config.Column(width="small", disabled=True),
                "Nome do Produto": st.column_config.Column(width="medium", disabled=True),
                "Quantidade": st.column_config.NumberColumn(format="%d", min_value=0, step=1, width="small"),
                "Pre√ßo de Compra (R$)": st.column_config.NumberColumn(format="R$ %.2f", width="small", disabled=True),
                "Estoque M√≠nimo": st.column_config.NumberColumn(format="%d", min_value=0, step=1, width="small"),
                "Cor da Tag": st.column_config.TextColumn(disabled=True) # Melhor desabilitar para n√£o editar direto aqui
            },
            hide_index=True,
            use_container_width=True,
            key="estoque_table_editor"
        )
        
        # Detectar se houve altera√ß√µes e atualizar o DataFrame principal
        if not edited_df.equals(df_display):
            # Para manter a integridade, apenas a Quantidade e Estoque M√≠nimo s√£o edit√°veis na tabela
            # Mapeia as altera√ß√µes de volta para o DataFrame original (st.session_state["estoque"])
            for _, row in edited_df.iterrows():
                original_idx = row['ID']
                st.session_state["estoque"].loc[original_idx, "Quantidade"] = row["Quantidade"]
                st.session_state["estoque"].loc[original_idx, "Estoque M√≠nimo"] = row["Estoque M√≠nimo"]
            st.success("Estoque atualizado pela tabela!")
            # st.rerun() # <-- ESTA LINHA FOI REMOVIDA PARA EVITAR O LOOP INFINITO

        st.write("---")
        st.subheader("A√ß√µes do Estoque")

        # Bot√µes de a√ß√£o para cada linha (Editar/Remover)
        # √â mais eficiente criar colunas para os bot√µes fora do dataframe quando o data_editor √© usado para a tabela
        for i, row in df_exibir.reset_index().iterrows():
            col_id, col_nome, col_edit, col_delete = st.columns([0.5, 4, 1, 1])
            with col_id:
                st.write(f"**ID:** {row['index']}")
            with col_nome:
                st.write(f"**Produto:** {row['Nome do Produto']}")
            with col_edit:
                if st.button("‚úèÔ∏è Editar", key=f"edit_individual_{row['index']}", help="Editar este produto"):
                    st.session_state["produto_selecionado_id"] = row['index']
                    st.experimental_rerun() # Necess√°rio para carregar os dados no formul√°rio
            with col_delete:
                if st.button("üóëÔ∏è Remover", key=f"delete_individual_{row['index']}", help="Remover este produto"):
                    st.session_state["estoque"] = st.session_state["estoque"].drop(row['index']).reset_index(drop=True)
                    st.success(f"Produto '{row['Nome do Produto']}' removido com sucesso!")
                    st.session_state["produto_selecionado_id"] = None # Limpa a sele√ß√£o de edi√ß√£o
                    st.rerun() # Necess√°rio para atualizar a tabela

        st.write("---")
        st.subheader("Importar/Exportar Dados")

        uploaded_file = st.file_uploader("Carregar estoque de um arquivo CSV", type=["csv"])
        if uploaded_file is not None:
            try:
                df_upload = pd.read_csv(uploaded_file)
                # Garante que as colunas essenciais para o app existem no CSV carregado
                for col in ["Imagem", "Cor da Tag", "Estoque M√≠nimo"]:
                    if col not in df_upload.columns:
                        # Define valores padr√£o se as colunas n√£o existirem no CSV
                        df_upload[col] = None if col == "Imagem" else ("Nenhuma" if col == "Cor da Tag" else 100) # Corrigi o valor padr√£o de 5 para 100 para Estoque M√≠nimo
                
                expected_cols = ["Nome do Produto", "Quantidade", "Pre√ßo de Compra (R$)", "Imagem", "Cor da Tag", "Estoque M√≠nimo"]
                if all(col in df_upload.columns for col in expected_cols):
                    st.session_state["estoque"] = df_upload[expected_cols]
                    st.success("Estoque carregado com sucesso!")
                    st.rerun() # Necess√°rio para carregar os novos dados na interface
                else:
                    st.error(f"O arquivo CSV deve conter as colunas: {', '.join(expected_cols)}")
            except Exception as e:
                st.error(f"Erro ao carregar o arquivo CSV: {e}")

        if not st.session_state["estoque"].empty:
            csv_buffer = io.StringIO()
            st.session_state["estoque"].to_csv(csv_buffer, index=False)
            csv_bytes = csv_buffer.getvalue().encode('utf-8')

            st.download_button(
                label="Baixar Estoque (CSV)",
                data=csv_bytes,
                file_name="meu_estoque.csv",
                mime="text/csv",
                help="Baixa os dados do seu estoque atual em formato CSV."
            )


if __name__ == "__main__":
    # Exemplo simples de login (se ainda n√£o estiver implementado)
    if "logado" not in st.session_state:
        st.session_state["logado"] = False
    
    pagina_inicio()